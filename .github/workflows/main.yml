name: Auto-Sync-Nightly

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:
    inputs:
      force_build:
        description: Force build even if upstream unchanged
        type: boolean
        default: false

permissions: { contents: read }
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
################################################################################
# 1) SYNC – keep fork up-to-date
################################################################################
  sync:
    runs-on: ubuntu-22.04
    permissions: { contents: write }
    outputs:
      changed: ${{ steps.sync.outputs.has_new_commits }}

    steps:
      - uses: actions/checkout@v4
        with: { persist-credentials: false }

      - id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4.1
        with:
          upstream_sync_repo: hashcat/hashcat
          upstream_sync_branch: master
          target_sync_branch: master
          target_repo_token: ${{ secrets.PAT_PUSH }}

################################################################################
# 2) BUILD – Linux | macOS | Windows
################################################################################
  build:
    needs: sync
    if: >
      needs.sync.outputs.changed == 'true' ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.force_build == 'true')

    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-22.04 , os_name: linux  , shared: 0 }
          - { os: macos-14     , os_name: macos  , shared: 1 }
          - { os: windows-2022 , os_name: windows, shared: 1 }

    runs-on: ${{ matrix.os }}
    permissions: { contents: read }

    steps:
      - uses: actions/checkout@v4

      # ---------- Windows tool-chain ----------
      - name: Set up MSYS2
        if: matrix.os_name == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          install: >-
            gcc git make libiconv libiconv-devel
          msystem: MINGW64
          update: true
          release: false

      # ---------- Compile (POSIX) -------------
      - name: make (POSIX)
        if: matrix.os_name != 'windows'
        env:
          SHARED: ${{ matrix.shared }}
        run: make -j"$(nproc || sysctl -n hw.ncpu || 4)"

      # ---------- Compile (Windows) -----------
      - name: make (Windows)
        if: matrix.os_name == 'windows'
        shell: msys2 {0}
        env:
          SHARED: ${{ matrix.shared }}
        run: make -j"${NUMBER_OF_PROCESSORS:-4}"

      # ---------- Arrange artefacts -----------
      - name: Legacy names / macOS sub-dir
        if: matrix.os_name != 'windows'
        run: |
          set -e
          if [[ "${{ matrix.os_name }}" == linux ]]; then
            chmod 0755 hashcat
            cp --preserve=mode hashcat hashcat.bin
            cp --preserve=mode hashcat hashcat64.bin
          else
            mkdir -p macos
            mv hashcat* libhashcat*.dylib macos/
          fi

      - name: Legacy names (Windows)
        if: matrix.os_name == 'windows'
        shell: msys2 {0}
        run: cp hashcat.exe hashcat64.exe

      # ---------- Pack artefact (portable tar) ----------
      - name: Pack artefact
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=(hashcat* libhashcat*)
          for d in macos charsets docs extra layouts masks modules rules example*; do
            [[ -e "$d" ]] && files+=("$d")
          done

          cmd=(tar)
          if tar --version 2>/dev/null | grep -q 'GNU'; then
            cmd+=(--owner=0 --group=0)
          fi
          cmd+=(-cf "parts-${{ matrix.os_name }}.tar" "${files[@]}")
          "${cmd[@]}"

      - uses: actions/upload-artifact@v4
        with:
          name: parts-${{ matrix.os_name }}
          path: parts-${{ matrix.os_name }}.tar

################################################################################
# 3) RELEASE – merge tars ▸ tar ▸ 7-Zip
################################################################################
  release:
    needs: build
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-22.04
    permissions: { contents: write }

    steps:
      - uses: actions/download-artifact@v4

      - name: Merge build outputs
        run: |
          mkdir dist
          for t in parts-*/*.tar parts-*.tar; do
            tar -xf "$t" -C dist
          done

      - name: Ensure execute bits
        run: chmod +x dist/hashcat{,64}.bin dist/hashcat || true

      - name: Create tarball
        run: tar --owner=0 --group=0 -cf hashcat.tar -C dist .

      - name: Compress with 7-Zip
        run: 7z a -mx=9 -mmt=on hashcat.7z hashcat.tar

      - name: Publish / update release
        uses: ncipollo/release-action@v1
        with:
          tag: Hashcat-Latest
          name: Hashcat-Latest
          artifacts: hashcat.7z
          allowUpdates: true
          generateReleaseNotes: true
