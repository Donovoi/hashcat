name: Auto-Sync-Nightly

on:
  # every 30 minutes (UTC)
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:
    inputs:
      force_build:
        description: "Run full build even if upstream unchanged"
        type: boolean
        default: false

# least-privilege by default
permissions:
  contents: read

# cancel older runs on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
# ────────────────────────────────────────────────────────────────
# 1) SYNC – fast-forward fork/master from upstream/master
# ────────────────────────────────────────────────────────────────
  sync:
    runs-on: ubuntu-22.04
    permissions: { contents: write }          # PAT push needs this
    outputs:
      changed: ${{ steps.sync.outputs.has_new_commits }}
    steps:
      - uses: actions/checkout@v4
        with: { persist-credentials: false }

      - id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4.1
        with:
          upstream_sync_repo: hashcat/hashcat
          upstream_sync_branch: master
          target_sync_branch: master
          target_repo_token: ${{ secrets.PAT_PUSH }}

# ────────────────────────────────────────────────────────────────
# 2) BUILD – compile on six OS/variant combos, upload artefacts
# ────────────────────────────────────────────────────────────────
  build:
    needs: sync
    if: needs.sync.outputs.changed == 'true' ||
        (github.event_name == 'workflow_dispatch' &&
         github.event.inputs.force_build == 'true')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - { os: ubuntu-22.04,  os_name: linux,   shared: 0 }
          - { os: ubuntu-22.04,  os_name: linux,   shared: 1 }
          # macOS
          - { os: macos-14,      os_name: macos,   shared: 0 }
          - { os: macos-14,      os_name: macos,   shared: 1 }
          # Windows
          - { os: windows-2022,  os_name: windows, shared: 0 }
          - { os: windows-2022,  os_name: windows, shared: 1 }

    runs-on: ${{ matrix.os }}
    permissions: { contents: read }

    steps:
      - uses: actions/checkout@v4

      # --- Windows: set up POSIX tool-chain (unique cache key) ---
      - uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          release: false
          update: true
          install: >
            gcc git make libiconv libiconv-devel

      # --- Build on POSIX hosts (Linux/macOS) ---
      - name: Build (bash)
        if: runner.os != 'Windows'
        shell: bash
        env: { SHARED: ${{ matrix.shared }} }
        run: make -j"$(nproc)"

      # --- Build on Windows (MSYS2) ---
      - name: Build (msys2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        env: { SHARED: ${{ matrix.shared }} }
        run: make -j"$(nproc || 4)"

      # --- Upload artefact ---
      - uses: actions/upload-artifact@v4
        with:
          name: parts-${{ matrix.os_name }}-${{ matrix.shared }}
          path: |
            hashcat*
            libhashcat*
            charsets/
            docs/
            extra/
            layouts/
            masks/
            modules/
            rules/
            example*

# ────────────────────────────────────────────────────────────────
# 3) RELEASE – merge artefacts, create one 7-Zip, publish nightly
# ────────────────────────────────────────────────────────────────
  release:
    needs: build
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-22.04          # p7zip is pre-installed
    permissions: { contents: write }

    steps:
      - uses: actions/download-artifact@v4

      # merge into bundle/ – later artefacts overwrite earlier files
      - name: Collect build outputs
        run: |
          mkdir -p bundle
          shopt -s nullglob
          for d in parts-*; do
            rsync -a "$d"/ bundle/     # overwrite duplicates
            rm -rf "$d"
          done

      - name: Create hashcat-nightly.7z
        run: 7z a -t7z -mx=9 hashcat-nightly.7z bundle

      - uses: ncipollo/release-action@v1
        with:
          tag: nightly-${{ github.sha }}
          name: "Nightly build – ${{ github.sha }}"
          artifacts: hashcat-nightly.7z
          allowUpdates: true
          generateReleaseNotes: true
