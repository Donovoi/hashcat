# .github/workflows/main.yml
name: Auto-Sync-Nightly

on:
  schedule:
    - cron: "*/30 * * * *"          # every 30 min
  workflow_dispatch:
    inputs:
      force_build:
        description: Force build even if upstream unchanged
        type: boolean
        default: false

permissions:
  contents: read

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

###############################################################################
# 1) SYNC â€“ keep our fork up-to-date
###############################################################################
jobs:
  sync:
    runs-on: ubuntu-22.04
    permissions: { contents: write }
    outputs:
      changed: ${{ steps.sync.outputs.has_new_commits }}
    steps:
      - uses: actions/checkout@v4
        with: { persist-credentials: false }

      - id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4.1
        with:
          upstream_sync_repo: hashcat/hashcat
          upstream_sync_branch: master
          target_sync_branch: master
          target_repo_token: ${{ secrets.PAT_PUSH }}

###############################################################################
# 2) BUILD â€“ Linux | macOS | Windows  Ã—  static | shared
###############################################################################
  build:
    needs: sync
    if: >-
      needs.sync.outputs.changed == 'true' ||
      (github.event_name == 'workflow_dispatch' &&
       github.event.inputs.force_build == 'true')

    strategy:
      fail-fast: false
      matrix:
        include:
          # ---------- Linux (static only â€“ becomes .bin) ---------------------
          - { os: ubuntu-22.04 , os_name: linux  , shared: 0 , shell: bash }
          # ---------- macOS (shared build lives under macos/ ) --------------
          - { os: macos-14     , os_name: macos  , shared: 1 , shell: bash }
          # ---------- Windows (shared; .exe is always self-contained) --------
          - { os: windows-2022 , os_name: windows, shared: 1 , shell: "msys2 {0}" }

    runs-on: ${{ matrix.os }}
    permissions: { contents: read }
    steps:
      - uses: actions/checkout@v4

      # ---- Windows tool-chain ---------------------------------------------
      - name: Set up MSYS2 (Windows only)
        if: matrix.os_name == 'windows'
        uses: msys2/setup-msys2@v2
        with:
          release: false
          update: true
          install: >-
            gcc git make libiconv libiconv-devel

      # ---- Compile ---------------------------------------------------------
      - name: make
        shell: ${{ matrix.shell }}
        env:
          SHARED: ${{ matrix.shared }}
        run: make -j"$(nproc || sysctl -n hw.ncpu || 4)"

      # ---- Arrange artefacts ----------------------------------------------
      - name: Legacy names / macOS sub-dir
        shell: bash
        run: |
          set -e
          if [[ "${{ matrix.os_name }}" == linux ]]; then
            chmod 0755 hashcat
            for n in hashcat.bin hashcat64.bin; do cp --preserve=mode hashcat "$n"; done
          elif [[ "${{ matrix.os_name }}" == macos ]]; then
            mkdir -p macos && mv hashcat* libhashcat*.dylib macos/
          else # windows
            cp hashcat.exe hashcat64.exe
          fi

      # ---- Pack into a tarball to keep mode bits ---------------------------
      - name: Pack artefact
        shell: bash
        run: |
          tar --owner=0 --group=0 -cf parts-${{ matrix.os_name }}.tar \
              hashcat* libhashcat* macos/ \
              charsets/ docs/ extra/ layouts/ masks/ modules/ rules/ example*
      - uses: actions/upload-artifact@v4
        with:
          name: parts-${{ matrix.os_name }}
          path: parts-${{ matrix.os_name }}.tar

###############################################################################
# 3) RELEASE â€“ merge tars âžœ final tar âžœ 7-Zip
###############################################################################
  release:
    needs: build
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-22.04
    permissions: { contents: write }
    steps:
      - uses: actions/download-artifact@v4

      # ---- Merge build outputs --------------------------------------------
      - name: Merge build outputs
        run: |
          mkdir dist
          shopt -s nullglob
          for t in parts-*/**/*.tar parts-*.tar; do
            echo "Extracting $t"
            tar -xf "$t" -C dist
          done

      # ---- Safety net: make sure hashcat is executable --------------------
      - name: Restore execute bits
        run: chmod +x dist/hashcat dist/hashcat.bin dist/hashcat64.bin || true

      # ðŸŸ¢ 1. pack everything into a tarball (preserves modes)
      - name: Create tarball
        run: tar --owner=0 --group=0 -cf hashcat.tar -C dist .

      # ðŸŸ¢ 2. compress with 7-Zip (safe for old p7zip 9.20)
      - name: Create hashcat.7z
        run: 7z a -mx=9 -mmt=on hashcat.7z hashcat.tar

      # ---- Publish / update release ---------------------------------------
      - name: Publish Hashcat-Latest release
        uses: ncipollo/release-action@v1
        with:
          tag: Hashcat-Latest
          name: Hashcat-Latest
          artifacts: hashcat.7z
          allowUpdates: true
          generateReleaseNotes: true
